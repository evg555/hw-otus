// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/evg555/hw-otus/hw12_13_14_15_calendar/internal/storage"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Storage) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *Storage) CreateEvent(ctx context.Context, event storage.Event) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: ctx, event
func (_m *Storage) DeleteEvent(ctx context.Context, event storage.Event) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEventsForDay provides a mock function with given fields: ctx, date
func (_m *Storage) ListEventsForDay(ctx context.Context, date time.Time) ([]*storage.Event, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for ListEventsForDay")
	}

	var r0 []*storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]*storage.Event, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []*storage.Event); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventsForMonth provides a mock function with given fields: ctx, date
func (_m *Storage) ListEventsForMonth(ctx context.Context, date time.Time) ([]*storage.Event, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for ListEventsForMonth")
	}

	var r0 []*storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]*storage.Event, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []*storage.Event); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventsForWeek provides a mock function with given fields: ctx, date
func (_m *Storage) ListEventsForWeek(ctx context.Context, date time.Time) ([]*storage.Event, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for ListEventsForWeek")
	}

	var r0 []*storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]*storage.Event, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []*storage.Event); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, id, event
func (_m *Storage) UpdateEvent(ctx context.Context, id string, event storage.Event) error {
	ret := _m.Called(ctx, id, event)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, storage.Event) error); ok {
		r0 = rf(ctx, id, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
